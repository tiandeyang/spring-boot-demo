把不变的抽离出去 做成独立的服务  消息推送 微信支付 地址相关


长轮训机制 hold请求 不返回 直到有需要的消息再返回


预见异常 捕获异常 包装异常 抛出异常 回滚
还有一种异常处理方式  比如在 定时任务里面循环调用 微信订单支付状态查询接口  如果抛出异常 则需要捕获  定时任务不能被中断
此时 可以额外记录下 以备补偿处理


# 数据库设计
诸如 年龄、钱包余额、销量字段 有必要设置默认值为数字类型  不要再默认为NULL了 unfriendly
用户提现开关 放在账户表更为合适 不应该放在用户表

# 接口设计
基本上一个页面封装成一个接口 页面内的操作按钮对应一个接口  但有时候  页面的按钮显示与否 是根据状态来的  也就是说 页面对应的接口不止数据 还包含按钮的状态
保持接口幂等性原则之一  状态的更改 一定要把前置状态作为条件
接口也要遵循模块化思想

#不可用状态(异常状态)

订单支付成功了 订单所附加的积分 机会次数 会生效
但是 用户一旦申请了 退款  积分 及 次数 就会进入 不可用状态（异常状态）
当 处理中时 保持不可用状态；当 进入最终状态时 平台予以退款了或平台驳回了 则次数会失效 机会失效 或 不可用状态改为 可用状态



# 安全
CSRF 跨站伪造请求  解决方案  anti TOKEN


#springcloud 常见问题



